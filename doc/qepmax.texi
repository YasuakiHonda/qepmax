@menu
* Introduction to qepmax::
* Functions and Variables for qepmax::
@end menu

@node Introduction to qepmax, , , 
@section Introduction to qepmax

@code{Qepmax} is a @code{Qepcad B} - Maxima interfacing module written in
Maxima language and Common Lisp. As @code{Qepcad B} provides so 
called quantifier elimination in the real domain, @code{qepmax}
adds this functionality to Maxima computer algebra system.

With using quantifier elimination (Q.E. in short), a variety of problems 
can be expressed and solved. Optimization problems with multi-variate 
polynomials with equality and inequality constraints can be exactly(!) and
symbolically(!!) solved. 

@code{Qepmax} requires @code{Qepcad B}, developed at and distributed from
the United States Naval Academy. @code{Qepmax} users are suggested to visit 
@url{http://www.usna.edu/CS/~qepcad/B/QEPCAD.html, Qepcad B homepage} to 
become familier with @code{Qepcad B}, to obtain the distribution package, and
to know how to install it.

Lincese terms of @code{Qepmax} can be found in each source files. 
@code{Qepmax} package is in GPL v2.

@code{Qepmax} package is written by Yasuaki Honda, then Prof. 
Dr. Reinhard Oldenburg of Goethe-Universit√§t Frankfurt has
contributed the improvements for allowing the use of logical 
operators and rational functions as well as better function
interface.

Further, ehito-san has contributed the improvement of the
treatment of rational functions, nested qe() call, and 
strict rational function treatment.

Hereafter is the quick introduction of:
@itemize @bullet
@item
What is Quantifier Elimination?
@item
What does Qepcad B do?
@item
What is qepmax package and how to use it?
@end itemize

@unnumberedsubsec What is Quantifier Elimination
A large size of problems can be expressed as a first order
predicate logic with the following properties:
@itemize @bullet
@item
variables are in real number domain
@item
predicates are =, <, >, <=, >=, #(not equal)
@item
terms are polinomials or rational functions
@end itemize

A logical formula with some of its variables quntified is 
called a Tarski sentence. 
Example: a circle @math{x^2+y^2=1} and a line @math{y=x/2+1/3} 
crosses with each other. Tarski sentence for this is:
@math{E x, E y, x^2+y^2=1 and y=x/2+1/3}
where E denotes the existential quantifier.

The quntifier elimination is a technique to obtain the
equivarent condition to the given Tarski sentence. The
resulted condition does not contain any quantified variables.

By using the quantifier elimination technique, we can obtain 
an equivarent condition:
@math{true}
meaning that, yes, there is a point (x,y) which satisfies
both circle and line formulas.

On the other hand, from
@math{E x, E y, x^2+y^2=1 and y=x/2+5}
we will obtain
@math{false}
since there is no such intersection point (x,y).

Further more, considering the following Tarski sentence with free variable a:
@math{E x, E y, x^2+y^2=1 and y=x/2+a}

Using the quantifier elimination, we obtain a condition on a:
@math{4*a^2-5<=0}

So, while a is in this range, the circle and the line cross, but
they don't cross if a is not in the range above.

@unnumberedsubsec What does Qepcad B do?
Qepcad B is a software that implements a quantifier elimination
algorithm called Cylindrical Algebraic Decomposition (CAD).
The software is developed by Prof. Chris Brown of US Naval Academy.
The homepage of the software is:
@url{http://www.usna.edu/CS/~qepcad/B/QEPCAD.html}

On starting the program Qepcad B, the interactive session starts.
You give a list of variables, number of free variables,
a list of quntified variables, and a Tarski sentence with Qepcad B 
syntax during the session. Alternatively, you can supply all
such information in a file and Qepcad B processes it.
Then the program computes the equivarent condition to the
specified Tarski sentence, only including the free variables. 

It is a fun to use Qepcad B directly from its command line 
interface, as it provides many commands and options to use
during the interactive sessions. 

@unnumberedsubsec What is qepmax package and how to use it?
Qepmax is a Maxima package that calls Qepcad B internally using
system() function to process Tarski sentence represented using
Maxima syntax.

Assuming it is correctly installed according to INSTALL, you
can load the package by:
@example
(%i1) load("qepmax.mac");
@end example

Qepmax package provides a function @code{qe(QFList, aLogicalExp)}.
@code{QFList} is a list of quantified variables. @code{aLogicalExp} is an
expression in the real domain. You can use =,<,>,<=,>=,# as
the predicates, polynomials and rational functions as terms,
and %and, %or, %not, %implies as the logical operators.
In polimomials and rational functions, you can use rational
numbers and variables as coefficients.

The function @code{qe()} generates a temporary file that can be used for the
input of Qepcad B. Then Qepcad B is invoked with the file contents
supplied from standard input. Qepcad generates an output file in which
quantifier elimination result is written.

Then @code{qe()} read the output file and translate the result into Maxima
formula and return it from qe(). You can of course use it for the futher 
computation using Maxima.

@opencatbox
@category{Symbolic methods}  @category{Optimization} @category{Share packages} @category{Package qepmax}
@closecatbox

@node Functions and Variables for qepmax, , ,
@section Functions and Variables for qepmax

@deffn {Function} qe (@var{QFVList}, @var{LogicalExp})

Compute a formula equivarent to @var{LogicalExp} with quantified
variables specified in @var{QFVList}. The computed formula does NOT
contain any quantified variables in @var{QFVList}.

Before giving preciese syntax definition, here goes the examples
appeared in the Quantifier Elimination explanation.

@example
(%i1) qe([[E,x],[E,y]], x^2+y^2=1 %and y=x/2+1/3);
(%o1) true
(%i2) qe([[E,x],[E,y]],x^2+y^2=1 %and y=x/2+5);
(%o2) false
@image{qe1}
@end example


@var{QFVList} is a list of pairs (two element list) of a quantifier 
and a variable. A quantifier is one of @var{A,E,F,G,C},and @var{Xk}, where k
is a positive integer. Variables are ordinal Maxima variables, however,
indexed variables are not supported. Quantifier @var{A} is the universal
quantifier (for all). @var{E} is the existential quantifier (there exists).
@var{F,G,C} are described in Qepcad B homepage. @var{Xk} is similar to
@var{E}, but the number of existence is exactly k.

An example of @var{QFVList} is [[A,x],[A,y]], meaning ``For all x and for
all y in R''. Another example is [[E,x],[A,y],[A,z]], meaning ``There exists
x in R such that for all y and for all z in R''. Variables appeared
in @var{QVList} are called quantified variables.

@var{LogicalExp} is a boolean formula in which you can use %and, %or, %implies,
and %not as boolean operators. Predicates in atomic formulas appeared in the 
@var{LogicalExp} are restricted to @code{<, <=, >, >=, =, #}. Terms in the 
atomic formulas are restricted to multivariate polynomials or rational functions
with coefficients being rational numbers. Atomic formula may also be a maxima
function which returns a boolean formula.

@code{Qepmax} supports the Extended Tarski Formula, the atomic formula
of the form @code{var op etf_root(k, polynomial)}. Detailed semantics
of this atomic formula is difficult explain here. Instead you should
refer to the following URL
@url{http://www.usna.edu/CS/~qepcad/B/user/ETF.html}.

Here I give you a very typical example and its meaning. In the Q.E.,
you may want to express some conditions on one of roots of an
equation. Extended Tarski Formula can be used for this purpose. For an
example, you can specify that @var{x} is a second smallest root of
@code{x^2=2} by the atomic formula @code{x=etf_root(2,x^2-2)}. This is
a shortcut of expressing that x is sqrt(2).

Any quantified variables specified in the @var{QVList} can be used in the
@var{LogicalExp}. Variables that are not specified in the @var{QVList} can
also be used. They are called free variables.

Couple of examples of @var{LogicalExp} are:
@example
x^2>=0
y=x/2+m %and y<x+1 %and y<-x+1
@end example

@code{qe} returns a boolean formula which only contains free variables  in 
the @var{LogicalExp}, still the returned formula is equivalent to 
@var{LogicalExp} quantified by @var{QVList}.

@end deffn

@defvr {Option variable} qepcad_installed_dir
Default value: @code{"~/qepmax/qesource"}

By extracting Qepcad B source tarball, all the files are placed in the 
directory @code{qesource}. This variable needs to be set up to point 
that directory.

@end defvr

@defvr {Option variable} qepcad_input_file
Default value: @code{sconcat(maxima_tempdir, "/qepcad_input.txt")}

@code{Qepmax} creates temporary files during its execution. One is
the input file to the qepcad command. This variable can be used to
specify the file path and the file name of the input file.

The default value is the concatenation of @code{maxima_tempdir} and
@code{"/qepcad_input.txt"}. Note that if you change the value of this
variable, you should also consider to change the value of the variable
@code{qepcad_file_pattern}.

@end defvr

@defvr {Option variable} qepcad_input_file
Default value: @code{sconcat(maxima_tempdir, "/qepcad_output.txt")}

@code{Qepmax} creates temporary files during its execution. One is
the output file to the qepcad command. This variable can be used to
specify the file path and the file name of the output file.

The default value is the concatenation of @code{maxima_tempdir} and
@code{"/qepcad_output.txt"}. Note that if you change the value of this
variable, you should also consider to change the value of the variable
@code{qepcad_file_pattern}.

@end defvr

@defvr {Option variable} qepcad_file_pattern
Default value: @code{sconcat(maxima_tempdir,"/qepcad_*.txt")}

@code{Qepmax} creates temporary files during its execution. Prior
to the creation, if exists, @code{qepmax} deletes such temporary
files using @code{rm} command using @code{system()} function.
This variable is used to specify the files to be deleted.

The default value is the concatenation of @code{maxima_tempdir} and
@code{"/qepcad_*.txt"}, which are good for default file names of
the input and output files. If you change the value of @code{qepcad_input_file}
and / or @code{qepcad_output_file}, you should also consider to change
the value of this variable.

@end defvr

@defvr {Option variable} qepcad_option
Default value: @code{" +N20000000 +L10000 "}

@code{Qepcad B} accepts several options. This variable is used to
specify such options to be passed.

The default value is " +N20000000 +L10000 ", which allocates more
memory to the computation library used in @code{qepcad}.

@end defvr



@c Local Variables: 
@c mode: texinfo
@c TeX-master: "include-maxima"
@c End: 
